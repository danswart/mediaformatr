% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_video_calls_in_target_file.r
\name{list_video_calls_in_target_file}
\alias{list_video_calls_in_target_file}
\title{List All Video File References Found in Target File}
\usage{
list_video_calls_in_target_file(
  target_file,
  video_extensions = c("mp4", "mov", "avi", "wmv", "webm", "mkv", "flv", "m4v"),
  print_output = TRUE,
  save_to_file = NULL,
  append = FALSE,
  add_section_header = NULL,
  show_line_numbers = FALSE,
  case_sensitive = FALSE
)
}
\arguments{
\item{target_file}{Character string specifying the path to the file to be analyzed.
File can be any text-based format (Rmd, md, qmd, txt, html, etc.).}

\item{video_extensions}{Character vector of video file extensions to search for.
Default is c("mp4", "mov", "avi", "wmv", "webm", "mkv", "flv", "m4v").
Extensions are matched case-insensitively unless case_sensitive = TRUE.}

\item{print_output}{Logical. If TRUE (default), prints the found video references to console.
If FALSE, suppresses console output.}

\item{save_to_file}{Character string specifying filename to save output, or NULL (default)
for no file output. If specified, the list of video references will be written to this file.}

\item{append}{Logical. If TRUE, appends to existing file. If FALSE (default),
overwrites existing file. Only used when save_to_file is not NULL.}

\item{add_section_header}{Character string to add as a header in the output file,
or NULL (default) for no header. Only used when save_to_file is not NULL.}

\item{show_line_numbers}{Logical. If TRUE, shows the line number where each video
reference was found. If FALSE (default), shows only the video paths.}

\item{case_sensitive}{Logical. If TRUE, searches for video extensions with exact case.
If FALSE (default), matches ".mp4", ".MP4", ".Mp4", etc.}
}
\value{
Character vector containing all video file references found in the target file,
in the order they were encountered. Returns character(0) if no videos are found.
}
\description{
This function reads a target file and extracts all video file references found within the content.
The video file paths are returned exactly as they appear in the source file, with no modifications
or transformations applied. Results can be displayed in the console and optionally saved to a file.
This function is specifically designed to inventory video usage in presentations, documentation,
and other multimedia content.
}
\details{
The function searches through each line of the target file using regular expressions
to identify video file references. It looks for any text pattern that ends with the
specified video extensions, regardless of the surrounding syntax (markdown, HTML,
video tags, file paths, etc.).

Duplicate video references are preserved in the output to show the actual frequency
of usage in the source file. This is particularly useful for presentations where
the same video might be referenced multiple times or for analyzing bandwidth usage.
If you need unique references only, apply \code{unique()} to the returned vector.

The function is particularly useful for:
\itemize{
\item Inventorying video content in presentations and documentation
\item Checking for broken video links before publishing
\item Analyzing multimedia usage patterns for bandwidth planning
\item Preparing video asset lists for deployment or CDN setup
\item Auditing large video files that might affect page load times
\item Compliance checking for accessibility video requirements
}

Common video reference formats detected:
\itemize{
\item HTML video tags: \code{<video src="path/video.mp4">}
\item Source elements: \code{<source src="path/video.webm" type="video/webm">}
\item Markdown links: \code{[Video](path/video.mov)}
\item Direct file paths: \code{videos/presentation.mp4}
\item Background videos: \code{background-video: url(path/video.mp4)}
}
}
\examples{
\dontrun{
# Basic usage - list videos found in a presentation file
list_video_calls_in_target_file("sample-slides.qmd")

# Show line numbers where videos are found
list_video_calls_in_target_file("presentation.rmd", show_line_numbers = TRUE)

# Save results to file with custom header
list_video_calls_in_target_file("slides.qmd",
                                 save_to_file = "video-inventory.txt",
                                 add_section_header = "Video Content Inventory")

# Search for specific video types only
list_video_calls_in_target_file("document.md",
                                 video_extensions = c("mp4", "webm"))

# Case-sensitive search for exact extensions
list_video_calls_in_target_file("document.md", case_sensitive = TRUE)

# Get results without console output for programmatic use
video_refs <- list_video_calls_in_target_file("sample-slides.qmd",
                                               print_output = FALSE)

# Get unique video references only
unique_videos <- unique(list_video_calls_in_target_file("slides.qmd",
                                                        print_output = FALSE))

# Check for high-bandwidth video formats
all_videos <- list_video_calls_in_target_file("presentation.qmd", print_output = FALSE)
large_videos <- grep("4k|uhd|hd|large", all_videos, value = TRUE, ignore.case = TRUE)

# Analyze video distribution across different formats
video_list <- list_video_calls_in_target_file("website.md", print_output = FALSE)
mp4_count <- length(grep("\\\\.mp4$", video_list, ignore.case = TRUE))
webm_count <- length(grep("\\\\.webm$", video_list, ignore.case = TRUE))
cat("MP4 videos:", mp4_count, "WebM videos:", webm_count, "\n")

# Use with package example file
example_file <- system.file("extdata", "slide-deck-sample.Rmd", package = "mediaformatr")
if (file.exists(example_file)) {
  list_video_calls_in_target_file(example_file)
}
}

}
\seealso{
\code{\link{list_gif_calls_in_target_file}} for GIF-specific analysis,
\code{\link{list_image_calls_in_target_file}} for listing all image references,
\code{\link{list_duplicate_media_calls_in_target_file}} for duplicate video analysis
}
