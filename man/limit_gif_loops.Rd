% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/limit_gif_loops.r
\name{limit_gif_loops}
\alias{limit_gif_loops}
\title{Limit Loop Count in Animated GIF Files with Enhanced Control and Reporting}
\usage{
limit_gif_loops(
  input_gif,
  output_gif,
  loop_limit = 3,
  create_backup = FALSE,
  overwrite_existing = FALSE,
  print_output = TRUE,
  save_to_file = NULL,
  append = FALSE,
  add_section_header = NULL,
  validate_gif = TRUE,
  quality_settings = NULL
)
}
\arguments{
\item{input_gif}{Character string specifying the path to the input GIF file.
File must exist and be a valid GIF format.}

\item{output_gif}{Character string specifying the path where the loop-limited GIF will be saved.
If the directory doesn't exist, it will be created automatically.}

\item{loop_limit}{Integer specifying the number of loops for the output GIF.
Default is 3. Use 0 for infinite loops, or any positive integer for specific loop counts.}

\item{create_backup}{Logical. If TRUE, creates a backup of the input file before processing.
Default is FALSE. Backup will be saved with ".backup" suffix.}

\item{overwrite_existing}{Logical. If TRUE, overwrites existing output file without warning.
If FALSE (default), stops with error if output file already exists.}

\item{print_output}{Logical. If TRUE (default), prints processing information to console
including file sizes and processing status. If FALSE, operates silently.}

\item{save_to_file}{Character string specifying filename to save processing log, or NULL (default)
for no log output. If specified, processing details will be written to this file.}

\item{append}{Logical. If TRUE, appends to existing log file. If FALSE (default),
overwrites existing log file. Only used when save_to_file is not NULL.}

\item{add_section_header}{Character string to add as a header in the log file,
or NULL (default) for no header. Only used when save_to_file is not NULL.}

\item{validate_gif}{Logical. If TRUE (default), validates that input file is actually a GIF
before processing. If FALSE, skips validation (faster but less safe).}

\item{quality_settings}{List of quality parameters for output GIF. Default is NULL (use magick defaults).
Can include elements like list(optimize = TRUE, colors = 256) for custom optimization.}
}
\value{
Invisible list containing processing results with elements:
\itemize{
\item \code{success}: Logical indicating if processing completed successfully
\item \code{input_size}: File size of input GIF in bytes
\item \code{output_size}: File size of output GIF in bytes
\item \code{size_change}: Percentage change in file size
\item \code{processing_time}: Time taken for processing in seconds
\item \code{loop_limit}: Applied loop limit
\item \code{backup_created}: Logical indicating if backup was created
}
When \code{print_output = FALSE}, this return value allows programmatic access to results.
}
\description{
This function reads an animated GIF file, modifies its loop count to a specified limit, and saves
the result to a new file. This is particularly useful for optimizing GIF files for presentations,
web content, and documentation where excessive looping can be distracting or consume unnecessary
bandwidth. The function provides comprehensive error handling, file validation, and optional
reporting features to ensure reliable GIF processing.
}
\details{
This function uses the magick package to read, modify, and write GIF files. The loop limiting
process preserves all frames and timing information while only modifying the loop count metadata.
This makes it ideal for presentation optimization where you want animations to stop after a
specific number of cycles rather than looping indefinitely.

Common use cases include:
\itemize{
\item Presentation optimization: Prevent distracting infinite loops during talks
\item Web content management: Reduce bandwidth usage from constantly looping GIFs
\item Documentation enhancement: Create controlled animations for tutorials
\item Social media content: Comply with platform-specific looping requirements
\item Email marketing: Ensure GIFs don't overwhelm email clients
\item Accessibility improvements: Reduce motion for users with vestibular disorders
}

The function automatically handles:
\itemize{
\item Directory creation for output paths
\item File format validation
\item Size comparison reporting
\item Error recovery and cleanup
\item Progress tracking for batch operations
}

Loop count guidelines:
\itemize{
\item 0 = Infinite loops (default GIF behavior)
\item 1 = Play once and stop
\item 2-5 = Typical range for presentations and documentation
\item 10+ = For emphasis or attention-getting content
}
}
\examples{
\dontrun{
# Basic usage - limit GIF to 3 loops
limit_gif_loops("gif/animated-chart.gif", "gif/limited-chart.gif")

# Limit to 2 loops with backup and validation
limit_gif_loops("gif/presentation-slide.gif",
                 "gif/slide-2loops.gif",
                 loop_limit = 2,
                 create_backup = TRUE,
                 validate_gif = TRUE)

# Silent processing with custom quality settings
limit_gif_loops("gif/large-animation.gif",
                 "gif/optimized-animation.gif",
                 loop_limit = 1,
                 print_output = FALSE,
                 quality_settings = list(optimize = TRUE, colors = 128))

# Batch processing with logging
limit_gif_loops("gif/demo.gif", "gif/demo-limited.gif",
                 loop_limit = 4,
                 save_to_file = "gif-processing.log",
                 add_section_header = "GIF Optimization Log")

# Create single-play GIF for email
result <- limit_gif_loops("gif/newsletter-banner.gif",
                          "gif/email-banner.gif",
                          loop_limit = 1,
                          create_backup = TRUE)

# Check processing results programmatically
if (result$success) {
  cat("File size reduced by", abs(result$size_change), "\%\n")
}

# Process multiple GIFs with error handling
gif_files <- list.files("gif/", pattern = "\\\\.gif$", full.names = TRUE)
for (gif in gif_files) {
  tryCatch({
    limit_gif_loops(gif,
                    paste0("limited/", basename(gif)),
                    loop_limit = 2)
  }, error = function(e) {
    message("Failed to process: ", gif, " - ", e$message)
  })
}
}

}
\seealso{
\code{\link{list_gif_calls_in_target_file}} for inventorying GIF usage,
\code{\link[magick]{image_animate}} for advanced GIF animation control
}
