% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_image_calls_in_target_file.r
\name{list_image_calls_in_target_file}
\alias{list_image_calls_in_target_file}
\title{List All Image File References Found in Target File}
\usage{
list_image_calls_in_target_file(
  target_file,
  image_extensions = c("png", "svg", "jpg", "jpeg", "bmp"),
  print_output = TRUE,
  save_to_file = NULL,
  append = FALSE,
  add_section_header = NULL,
  show_line_numbers = FALSE
)
}
\arguments{
\item{target_file}{Character string specifying the path to the file to be analyzed.
File can be any text-based format (Rmd, md, qmd, txt, etc.).}

\item{image_extensions}{Character vector of image file extensions to search for.
Default is c("png", "svg", "jpg", "jpeg", "bmp"). Extensions are matched case-insensitively.}

\item{print_output}{Logical. If TRUE (default), prints the found image references to console.
If FALSE, suppresses console output.}

\item{save_to_file}{Character string specifying filename to save output, or NULL (default)
for no file output. If specified, the list of image references will be written to this file.}

\item{append}{Logical. If TRUE, appends to existing file. If FALSE (default),
overwrites existing file. Only used when save_to_file is not NULL.}

\item{add_section_header}{Character string to add as a header in the output file,
or NULL (default) for no header. Only used when save_to_file is not NULL.}

\item{show_line_numbers}{Logical. If TRUE, shows the line number where each image
reference was found. If FALSE (default), shows only the image paths.}
}
\value{
Character vector containing all image file references found in the target file,
in the order they were encountered. Returns character(0) if no images are found.
}
\description{
This function reads a target file and extracts all image file references (PNG, SVG, JPG, JPEG, BMP)
found within the content. The image file paths are returned exactly as they appear in the source file,
with no modifications or transformations applied. Results can be displayed in the console and
optionally saved to a file.
}
\details{
The function searches through each line of the target file using regular expressions
to identify image file references. It looks for any text pattern that ends with the
specified image extensions, regardless of the surrounding syntax (markdown, HTML, etc.).

Duplicate image references are preserved in the output to show the actual frequency
of usage in the source file. If you need unique references only, apply \code{unique()}
to the returned vector.
}
\examples{
\dontrun{
# Basic usage - list images found in a file
list_image_calls_in_target_file("sample-slides.qmd")

# Show line numbers where images are found
list_image_calls_in_target_file("sample-slides.qmd", show_line_numbers = TRUE)

# Save results to file with custom header
list_image_calls_in_target_file("sample-slides.qmd",
                                 save_to_file = "found-images.txt",
                                 add_section_header = "Images in Presentation")

# Search for specific image types only
list_image_calls_in_target_file("document.md",
                                 image_extensions = c("png", "jpg"))

# Get results without console output
image_refs <- list_image_calls_in_target_file("sample-slides.qmd",
                                               print_output = FALSE)

# Get unique image references only
unique_images <- unique(list_image_calls_in_target_file("slides.qmd",
                                                        print_output = FALSE))
}

}
\seealso{
\code{\link{list_gif_calls_in_target_file}} for GIF-specific analysis
}
