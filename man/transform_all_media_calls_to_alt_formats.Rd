% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform_all_media_calls_to_alt_formats.r
\name{transform_all_media_calls_to_alt_formats}
\alias{transform_all_media_calls_to_alt_formats}
\title{Transform All Media File References to Alternative Markdown and HTML Formats}
\usage{
transform_all_media_calls_to_alt_formats(
  target_file,
  media_extensions = c("gif", "png", "jpg", "jpeg", "svg", "webp", "mp4", "mov", "avi",
    "mp3", "wav"),
  default_height = "200px",
  default_width = NULL,
  alt_text = "",
  print_output = TRUE,
  save_to_file = NULL,
  append = FALSE,
  add_section_header = NULL,
  show_line_numbers = FALSE,
  html_attributes = NULL,
  remove_duplicates = FALSE
)
}
\arguments{
\item{target_file}{Character string specifying the path to the file containing media references.
File can be any text-based format (Rmd, md, qmd, txt, html, etc.).}

\item{media_extensions}{Character vector of media file extensions to search for.
Default is c("gif", "png", "jpg", "jpeg", "svg", "webp", "mp4", "mov", "avi", "mp3", "wav").
Extensions are matched case-insensitively.}

\item{default_height}{Character string specifying default height for HTML img tags.
Default is "200px". Use CSS-valid values like "150px", "10em", or "auto".}

\item{default_width}{Character string specifying default width for HTML img tags.
Default is NULL (no width specified). Use CSS-valid values like "300px", "50\%", etc.}

\item{alt_text}{Character string for alternative text in both formats.
Default is empty string. Highly recommended for accessibility.}

\item{print_output}{Logical. If TRUE (default), prints formatted output to console.
If FALSE, returns the results as a list for programmatic use.}

\item{save_to_file}{Character string specifying filename to save output, or NULL (default)
for no file output. If specified, both formats will be written to this file.}

\item{append}{Logical. If TRUE, appends to existing file. If FALSE (default),
overwrites existing file. Only used when save_to_file is not NULL.}

\item{add_section_header}{Character string to add as a header in the output file,
or NULL (default) for no header. Only used when save_to_file is not NULL.}

\item{show_line_numbers}{Logical. If TRUE, shows the line number where each media
reference was found. If FALSE (default), shows only the transformed syntax.}

\item{html_attributes}{List of additional HTML attributes to include in img tags.
Default is NULL. Example: list(class = "responsive", loading = "lazy").}

\item{remove_duplicates}{Logical. If TRUE, removes duplicate media references from output.
If FALSE (default), shows all instances as they appear in the source file.}
}
\value{
When \code{print_output = FALSE}, returns a list containing:
\itemize{
\item \code{original}: Original media references found in file
\item \code{markdown}: Media references in Markdown format
\item \code{html}: Media references in HTML format
\item \code{total_found}: Number of media references found
\item \code{unique_files}: Number of unique media files
\item \code{file_summary}: Summary statistics
}
When \code{print_output = TRUE}, returns invisible list for chaining.
}
\description{
This function reads a target file, extracts all media file references (images, videos, audio),
and transforms them into both Markdown and HTML formats for easy copying and pasting into
different document types. The function outputs clean, properly formatted syntax for both
formats, making it ideal for content migration between presentation systems, documentation
platforms, and web content management systems.
}
\details{
This function is particularly useful for content migration scenarios where media references
need to be converted between different markup formats. It handles various input formats
including:

\strong{Input formats recognized:}
\itemize{
\item Markdown: \code{![alt](path/image.png)}
\item HTML: \code{<img src="path/image.png">}
\item CSS background: \code{url(path/image.png)}
\item Plain paths: \code{path/image.png}
\item Quoted paths: \code{"path/image.png"}
}

\strong{Output formats generated:}
\itemize{
\item Clean Markdown: \code{![alt](path/image.png)}
\item Proper HTML: \code{<img src="path/image.png" height="200px" alt="alt" />}
}

\strong{Common use cases:}
\itemize{
\item Converting presentations to documentation formats
\item Migrating content between CMS platforms
\item Preparing media references for different publishing systems
\item Creating consistent markup across document types
\item Batch processing media references for optimization
\item Accessibility improvements by adding alt text systematically
}

The function automatically handles:
\itemize{
\item Proper HTML attribute quoting
\item Self-closing HTML tags
\item CSS-valid dimension units
\item Cross-platform path compatibility
\item Multiple media file formats
\item Duplicate detection and removal
}

\strong{HTML Accessibility Features:}
The generated HTML includes proper accessibility attributes and follows modern HTML5
standards with self-closing tags and quoted attribute values.
}
\examples{
\dontrun{
# Basic usage - transform media calls to both formats
transform_all_media_calls_to_alt_formats("sample-slides.qmd")

# Custom dimensions and alt text for accessibility
transform_all_media_calls_to_alt_formats("presentation.rmd",
                                          default_height = "150px",
                                          default_width = "300px",
                                          alt_text = "Presentation image")

# Save output to file with custom header
transform_all_media_calls_to_alt_formats("slides.qmd",
                                          save_to_file = "media-formats.md",
                                          add_section_header = "Media Reference Formats")

# Focus on specific media types with custom HTML attributes
transform_all_media_calls_to_alt_formats("document.md",
                                          media_extensions = c("png", "jpg", "gif"),
                                          html_attributes = list(class = "responsive",
                                                                 loading = "lazy"))

# Get results programmatically for further processing
results <- transform_all_media_calls_to_alt_formats("presentation.qmd",
                                                     print_output = FALSE,
                                                     remove_duplicates = TRUE)

# Process results
cat("Found", results$total_found, "media references\n")
cat("Unique files:", results$unique_files, "\n")

# Show line numbers for debugging
transform_all_media_calls_to_alt_formats("slides.qmd",
                                          show_line_numbers = TRUE,
                                          remove_duplicates = FALSE)

# Batch processing multiple files
slide_files <- list.files(".", pattern = "\\\\.(qmd|rmd)$", full.names = TRUE)
for (file in slide_files) {
  cat("Processing:", basename(file), "\n")
  transform_all_media_calls_to_alt_formats(file,
                                            save_to_file = paste0(basename(file), "-media.txt"))
}
}

}
\seealso{
\code{\link{list_image_calls_in_target_file}} for media inventory without transformation,
\code{\link{list_duplicate_media_calls_in_target_file}} for duplicate analysis
}
